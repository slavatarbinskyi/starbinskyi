@{
	ViewBag.Title = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
	.stickHeader {
		background-image: url('http://localhost:8778/stickhead.png');
		background-repeat: repeat-y;
		width: 390px;
		margin-top: 20px;
		margin-left: 10px;

	}

	.stickFooter {
		background-image: url('http://localhost:8778/stickfooter.png');
		width: 400px;
		height: 300px;
		background-repeat: no-repeat;
	}

	ul {
		list-style-type: none;
	}
	.title
	{
		margin-left:150px;
	}
	.completeditems
	{
		 text-decoration: line-through;
	}
</style>
<div class="stickTodo">
	<ul class="list-inline toDoList" data-bind="foreach:toDoLists">
		<li class="col-md-4 text-left">
			<div class="stickHeader">
				<h1><strong  class="title" data-bind="text: Name"></strong></h1>

				<ul class="items" data-bind="foreach: Items">

					<li>
						<input type="checkbox" data-bind="checked:IsCompleted" />
						<span data-bind="text: Text,css:{completeditems:IsCompleted}"></span>
					</li>
				</ul>
			</div>
			<div class="stickFooter"> </div>
		</li>

	</ul>
</div>



@Scripts.Render("~/bundles/jquery")
<script type="text/javascript" src="~/Scripts/knockout-3.4.1.js"></script>
<script type="text/javascript" src="~/Scripts/knockout.mapping-latest.debug.js"></script>
<script>
	function viewModel() {
		var self = this;

		var mapping = {
			'observe': ["Name", "Items"]
		}

		self.loadLists = function () {
			$.ajax({
				type: 'GET',
				contentType: 'application/json',
				url: '/Home/GetUsersList',
				dataType: 'JSON',
				success: function (data) {
					$.each(data, function (index, element) {
						
						var model=ko.mapping.fromJS(element);
						self.toDoLists.push(model);
						console.log(model);

					});
				},
				error: function () {
					console.log('shit');
				}
			});
		}
		self.markItem = function (model) {
			$.ajax({
				type: 'POST',
				contentType: 'application/json',
				url: '/Home/MarkItem',
				dataType: 'JSON',
				data:model,
				success: function (data) {
				},
				error: function () {
					console.log('shit');
				}
			});
		}
		self.toDoLists = ko.observableArray([]);
		self.toDoLists.subscribe(function (changes) {
			// For this example, we'll just print out the change info
			console.log(changes);

		}, null, "arrayChange");

	}

	var vm = new viewModel();
	vm.loadLists();

	ko.applyBindings(vm);


</script>

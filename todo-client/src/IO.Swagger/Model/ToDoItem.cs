/* 
 * WebApp
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ToDoItem
    /// </summary>
    [DataContract]
    public partial class ToDoItem :  IEquatable<ToDoItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ToDoItem" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Text">Text.</param>
        /// <param name="Priority">Priority.</param>
        /// <param name="IsCompleted">IsCompleted.</param>
        /// <param name="IsNotify">IsNotify.</param>
        /// <param name="NextNotifyTime">NextNotifyTime.</param>
        /// <param name="ToDoList">ToDoList.</param>
        /// <param name="Created">Created.</param>
        /// <param name="Modified">Modified.</param>
        /// <param name="ToDoListId">ToDoListId.</param>
        public ToDoItem(int? Id = null, string Text = null, int? Priority = null, bool? IsCompleted = null, bool? IsNotify = null, DateTime? NextNotifyTime = null, ToDoList ToDoList = null, DateTime? Created = null, DateTime? Modified = null, int? ToDoListId = null)
        {
            this.Id = Id;
            this.Text = Text;
            this.Priority = Priority;
            this.IsCompleted = IsCompleted;
            this.IsNotify = IsNotify;
            this.NextNotifyTime = NextNotifyTime;
            this.ToDoList = ToDoList;
            this.Created = Created;
            this.Modified = Modified;
            this.ToDoListId = ToDoListId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="Priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Gets or Sets IsCompleted
        /// </summary>
        [DataMember(Name="IsCompleted", EmitDefaultValue=false)]
        public bool? IsCompleted { get; set; }
        /// <summary>
        /// Gets or Sets IsNotify
        /// </summary>
        [DataMember(Name="IsNotify", EmitDefaultValue=false)]
        public bool? IsNotify { get; set; }
        /// <summary>
        /// Gets or Sets NextNotifyTime
        /// </summary>
        [DataMember(Name="NextNotifyTime", EmitDefaultValue=false)]
        public DateTime? NextNotifyTime { get; set; }
        /// <summary>
        /// Gets or Sets ToDoList
        /// </summary>
        [DataMember(Name="ToDoList", EmitDefaultValue=false)]
        public ToDoList ToDoList { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="Modified", EmitDefaultValue=false)]
        public DateTime? Modified { get; set; }
        /// <summary>
        /// Gets or Sets ToDoListId
        /// </summary>
        [DataMember(Name="ToDoList_Id", EmitDefaultValue=false)]
        public int? ToDoListId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ToDoItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("  IsNotify: ").Append(IsNotify).Append("\n");
            sb.Append("  NextNotifyTime: ").Append(NextNotifyTime).Append("\n");
            sb.Append("  ToDoList: ").Append(ToDoList).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  ToDoListId: ").Append(ToDoListId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ToDoItem);
        }

        /// <summary>
        /// Returns true if ToDoItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ToDoItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ToDoItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Priority == other.Priority ||
                    this.Priority != null &&
                    this.Priority.Equals(other.Priority)
                ) && 
                (
                    this.IsCompleted == other.IsCompleted ||
                    this.IsCompleted != null &&
                    this.IsCompleted.Equals(other.IsCompleted)
                ) && 
                (
                    this.IsNotify == other.IsNotify ||
                    this.IsNotify != null &&
                    this.IsNotify.Equals(other.IsNotify)
                ) && 
                (
                    this.NextNotifyTime == other.NextNotifyTime ||
                    this.NextNotifyTime != null &&
                    this.NextNotifyTime.Equals(other.NextNotifyTime)
                ) && 
                (
                    this.ToDoList == other.ToDoList ||
                    this.ToDoList != null &&
                    this.ToDoList.Equals(other.ToDoList)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.Modified == other.Modified ||
                    this.Modified != null &&
                    this.Modified.Equals(other.Modified)
                ) && 
                (
                    this.ToDoListId == other.ToDoListId ||
                    this.ToDoListId != null &&
                    this.ToDoListId.Equals(other.ToDoListId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Priority != null)
                    hash = hash * 59 + this.Priority.GetHashCode();
                if (this.IsCompleted != null)
                    hash = hash * 59 + this.IsCompleted.GetHashCode();
                if (this.IsNotify != null)
                    hash = hash * 59 + this.IsNotify.GetHashCode();
                if (this.NextNotifyTime != null)
                    hash = hash * 59 + this.NextNotifyTime.GetHashCode();
                if (this.ToDoList != null)
                    hash = hash * 59 + this.ToDoList.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.Modified != null)
                    hash = hash * 59 + this.Modified.GetHashCode();
                if (this.ToDoListId != null)
                    hash = hash * 59 + this.ToDoListId.GetHashCode();
                return hash;
            }
        }
    }

}
